initSidebarItems({"struct":[["Chain","The middleware chain used in Iron.This is a canonical implementation of Iron's middleware system, but Iron's infrastructure is flexible enough to allow alternate systems."]],"trait":[["AfterMiddleware","`AfterMiddleware` are fired after a `Handler` is called inside of a Chain.`AfterMiddleware` receive both a `Request` and a `Response` and are responsible for doing any response post-processing.`AfterMiddleware` should *not* overwrite the contents of a Response. In the common case, a complete response is generated by the Chain's `Handler` and `AfterMiddleware` simply do post-processing of that Response, such as adding headers or logging."],["AroundMiddleware","AroundMiddleware are used to wrap and replace the `Handler` in a `Chain`.AroundMiddleware produce `Handler`s through their `around` method, which is called once on insertion into a Chain or can be called manually outside of a `Chain`."],["BeforeMiddleware","`BeforeMiddleware` are fired before a `Handler` is called inside of a Chain.`BeforeMiddleware` are responsible for doing request pre-processing that requires the ability to change control-flow, such as authorization middleware, or for editing the request by modifying the headers.`BeforeMiddleware` only have access to the Request, if you need to modify or read a Response, you will need `AfterMiddleware`. Middleware which wishes to send an early response that is not an error cannot be `BeforeMiddleware`, but should instead be `AroundMiddleware`."],["Handler","`Handler`s are responsible for handling requests by creating Responses from Requests."]]});