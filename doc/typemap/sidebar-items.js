initSidebarItems({"enum":[["Entry","A view onto an entry in a TypeMap."]],"struct":[["OccupiedEntry","A view onto an occupied entry in a TypeMap."],["TypeMap","A map keyed by types.Can contain one value of any type for each key type, as defined by the Assoc trait.You usually do not need to worry about the A type parameter, but it can be used to add bounds to the possible value types that can be stored in this map. Usually, you are looking for `ShareMap`, which is `Send + Sync`."],["VacantEntry","A view onto an unoccupied entry in a TypeMap."]],"trait":[["CloneAny","A marker trait meant for use as the `A` parameter in `TypeMap`.This can be used to construct `TypeMap`s containing only types which implement `Clone` like so: `TypeMap::<CloneAny>::custom()`, which produces a `TypeMap<CloneAny>`. Combine `CloneAny` with `Send` or `Sync` to add additional bounds.There is also an exported alias for this type of `TypeMap`, `CloneAny`."],["DebugAny","A marker trait meant for use as the `A` parameter in `TypeMap`.This can be used to construct `TypeMap`s containing only types which implement `Debug` like so: `TypeMap::<DebugAny>::custom()`, which produces a `TypeMap<DebugAny>`. Combine `DebugAny` with `Send` or `Sync` to add additional bounds.There is also an exported alias for this type of `TypeMap`, `DebugMap`."],["Key","This trait defines the relationship between keys and values in a TypeMap.It is implemented for Keys, with a phantom associated type for the values."]],"type":[["CloneMap","A version of `TypeMap` containing only `Clone` types."],["DebugMap","A version of `TypeMap` containing only `Debug` types."],["SendMap","A version of `TypeMap` containing only `Send` types."],["ShareCloneMap","A version of `TypeMap` containing only `Clone + Send + Sync` types."],["ShareDebugMap","A version of `TypeMap` containing only `Debug + Send + Sync` types."],["ShareMap","A version of `TypeMap` containing only `Send + Sync` types."],["SyncMap","A version of `TypeMap` containing only `Sync` types."]]});